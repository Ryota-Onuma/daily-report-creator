diff --git a/scripts/gh-my-prs/go.mod b/scripts/gh-my-prs/go.mod
new file mode 100644
index 0000000..c579916
--- /dev/null
+++ b/scripts/gh-my-prs/go.mod
@@ -0,0 +1,4 @@
+module github.com/Ryota-Onuma/ai-agents/scripts/gh-my-prs
+
+go 1.25
+
diff --git a/scripts/gh-my-prs/main.go b/scripts/gh-my-prs/main.go
new file mode 100644
index 0000000..02d1461
--- /dev/null
+++ b/scripts/gh-my-prs/main.go
@@ -0,0 +1,50 @@
+package main
+
+import (
+	"context"
+	"fmt"
+	"log"
+	"os"
+	"os/exec"
+	"strings"
+	"time"
+)
+
+func ghCmd() string {
+	if c := os.Getenv("GH_COMMAND"); c != "" {
+		return c
+	}
+	return "gh"
+}
+
+func getAssignedPRLinks(ctx context.Context) ([]string, error) {
+	cmd := exec.CommandContext(ctx, ghCmd(), "pr", "list", "--assignee", "@me", "--json", "url", "--jq", ".[].url")
+	output, err := cmd.Output()
+	if err != nil {
+		return nil, fmt.Errorf("gh command failed: %w", err)
+	}
+	lines := strings.Split(strings.TrimSpace(string(output)), "\n")
+	var links []string
+	for _, line := range lines {
+		line = strings.TrimSpace(line)
+		if line != "" {
+			links = append(links, line)
+		}
+	}
+	return links, nil
+}
+
+func main() {
+	log.SetFlags(0)
+	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
+	defer cancel()
+
+	links, err := getAssignedPRLinks(ctx)
+	if err != nil {
+		log.Fatalf(`{"level":"error","msg":"%v"}`, err)
+	}
+	log.Printf(`{"level":"info","msg":"found pull requests","count":%d}`, len(links))
+	for _, l := range links {
+		fmt.Println(l)
+	}
+}
diff --git a/scripts/gh-my-prs/main_test.go b/scripts/gh-my-prs/main_test.go
new file mode 100644
index 0000000..42e4620
--- /dev/null
+++ b/scripts/gh-my-prs/main_test.go
@@ -0,0 +1,46 @@
+package main
+
+import (
+	"context"
+	"fmt"
+	"os"
+	"path/filepath"
+	"testing"
+)
+
+func writeFakeGh(t *testing.T, content string, exitCode int) string {
+	t.Helper()
+	dir := t.TempDir()
+	path := filepath.Join(dir, "gh")
+	script := "#!/bin/sh\n" + content + "\nexit " + fmt.Sprintf("%d", exitCode) + "\n"
+	if err := os.WriteFile(path, []byte(script), 0o755); err != nil {
+		t.Fatalf("failed to write fake gh: %v", err)
+	}
+	return path
+}
+
+func TestGetAssignedPRLinks(t *testing.T) {
+	fake := writeFakeGh(t, "echo https://example.com/pr1\necho\necho https://example.com/pr2", 0)
+	t.Setenv("GH_COMMAND", fake)
+	links, err := getAssignedPRLinks(context.Background())
+	if err != nil {
+		t.Fatalf("expected no error, got %v", err)
+	}
+	want := []string{"https://example.com/pr1", "https://example.com/pr2"}
+	if len(links) != len(want) {
+		t.Fatalf("unexpected link count: %d", len(links))
+	}
+	for i, l := range links {
+		if l != want[i] {
+			t.Errorf("link %d = %s; want %s", i, l, want[i])
+		}
+	}
+}
+
+func TestGetAssignedPRLinksError(t *testing.T) {
+	fake := writeFakeGh(t, "echo error 1>&2", 1)
+	t.Setenv("GH_COMMAND", fake)
+	if _, err := getAssignedPRLinks(context.Background()); err == nil {
+		t.Fatalf("expected error")
+	}
+}
