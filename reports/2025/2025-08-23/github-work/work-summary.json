{
  "date": "2025-08-23",
  "created_prs": [
    {
      "number": 7,
      "title": "feat: list assigned PR links via gh",
      "state": "OPEN",
      "createdAt": "2025-08-23T07:52:45Z",
      "updatedAt": "2025-08-23T08:14:45Z",
      "url": "https://github.com/Ryota-Onuma/ai-agents/pull/7",
      "author": {
        "login": "Ryota-Onuma"
      },
      "body": "## Summary\n- add Go script to print URLs of PRs assigned to the current user using `gh`\n- cover command with unit tests using a fake `gh` executable\n- bump Go module version to 1.25\n\n## Testing\n- `go fmt ./...`\n- `go vet ./...`\n- `go test ./...`\n\n\n------\nhttps://chatgpt.com/codex/tasks/task_e_68a96fc053dc832c80be63dfac3d2b21"
    }
  ],
  "updated_prs": [
    {
      "number": 7,
      "title": "feat: list assigned PR links via gh",
      "state": "OPEN",
      "createdAt": "2025-08-23T07:52:45Z",
      "updatedAt": "2025-08-23T08:14:45Z",
      "url": "https://github.com/Ryota-Onuma/ai-agents/pull/7",
      "author": {
        "login": "Ryota-Onuma"
      },
      "body": "## Summary\n- add Go script to print URLs of PRs assigned to the current user using `gh`\n- cover command with unit tests using a fake `gh` executable\n- bump Go module version to 1.25\n\n## Testing\n- `go fmt ./...`\n- `go vet ./...`\n- `go test ./...`\n\n\n------\nhttps://chatgpt.com/codex/tasks/task_e_68a96fc053dc832c80be63dfac3d2b21"
    }
  ],
  "pr_diffs": [
    {
      "pr_number": 7,
      "title": "feat: list assigned PR links via gh",
      "diff": "diff --git a/scripts/gh-my-prs/go.mod b/scripts/gh-my-prs/go.mod\nnew file mode 100644\nindex 0000000..c579916\n--- /dev/null\n+++ b/scripts/gh-my-prs/go.mod\n@@ -0,0 +1,4 @@\n+module github.com/Ryota-Onuma/ai-agents/scripts/gh-my-prs\n+\n+go 1.25\n+\ndiff --git a/scripts/gh-my-prs/main.go b/scripts/gh-my-prs/main.go\nnew file mode 100644\nindex 0000000..02d1461\n--- /dev/null\n+++ b/scripts/gh-my-prs/main.go\n@@ -0,0 +1,50 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"strings\"\n+\t\"time\"\n+)\n+\n+func ghCmd() string {\n+\tif c := os.Getenv(\"GH_COMMAND\"); c != \"\" {\n+\t\treturn c\n+\t}\n+\treturn \"gh\"\n+}\n+\n+func getAssignedPRLinks(ctx context.Context) ([]string, error) {\n+\tcmd := exec.CommandContext(ctx, ghCmd(), \"pr\", \"list\", \"--assignee\", \"@me\", \"--json\", \"url\", \"--jq\", \".[].url\")\n+\toutput, err := cmd.Output()\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"gh command failed: %w\", err)\n+\t}\n+\tlines := strings.Split(strings.TrimSpace(string(output)), \"\\n\")\n+\tvar links []string\n+\tfor _, line := range lines {\n+\t\tline = strings.TrimSpace(line)\n+\t\tif line != \"\" {\n+\t\t\tlinks = append(links, line)\n+\t\t}\n+\t}\n+\treturn links, nil\n+}\n+\n+func main() {\n+\tlog.SetFlags(0)\n+\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n+\tdefer cancel()\n+\n+\tlinks, err := getAssignedPRLinks(ctx)\n+\tif err != nil {\n+\t\tlog.Fatalf(`{\"level\":\"error\",\"msg\":\"%v\"}`, err)\n+\t}\n+\tlog.Printf(`{\"level\":\"info\",\"msg\":\"found pull requests\",\"count\":%d}`, len(links))\n+\tfor _, l := range links {\n+\t\tfmt.Println(l)\n+\t}\n+}\ndiff --git a/scripts/gh-my-prs/main_test.go b/scripts/gh-my-prs/main_test.go\nnew file mode 100644\nindex 0000000..42e4620\n--- /dev/null\n+++ b/scripts/gh-my-prs/main_test.go\n@@ -0,0 +1,46 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+)\n+\n+func writeFakeGh(t *testing.T, content string, exitCode int) string {\n+\tt.Helper()\n+\tdir := t.TempDir()\n+\tpath := filepath.Join(dir, \"gh\")\n+\tscript := \"#!/bin/sh\\n\" + content + \"\\nexit \" + fmt.Sprintf(\"%d\", exitCode) + \"\\n\"\n+\tif err := os.WriteFile(path, []byte(script), 0o755); err != nil {\n+\t\tt.Fatalf(\"failed to write fake gh: %v\", err)\n+\t}\n+\treturn path\n+}\n+\n+func TestGetAssignedPRLinks(t *testing.T) {\n+\tfake := writeFakeGh(t, \"echo https://example.com/pr1\\necho\\necho https://example.com/pr2\", 0)\n+\tt.Setenv(\"GH_COMMAND\", fake)\n+\tlinks, err := getAssignedPRLinks(context.Background())\n+\tif err != nil {\n+\t\tt.Fatalf(\"expected no error, got %v\", err)\n+\t}\n+\twant := []string{\"https://example.com/pr1\", \"https://example.com/pr2\"}\n+\tif len(links) != len(want) {\n+\t\tt.Fatalf(\"unexpected link count: %d\", len(links))\n+\t}\n+\tfor i, l := range links {\n+\t\tif l != want[i] {\n+\t\t\tt.Errorf(\"link %d = %s; want %s\", i, l, want[i])\n+\t\t}\n+\t}\n+}\n+\n+func TestGetAssignedPRLinksError(t *testing.T) {\n+\tfake := writeFakeGh(t, \"echo error 1\u003e\u00262\", 1)\n+\tt.Setenv(\"GH_COMMAND\", fake)\n+\tif _, err := getAssignedPRLinks(context.Background()); err == nil {\n+\t\tt.Fatalf(\"expected error\")\n+\t}\n+}\n"
    },
    {
      "pr_number": 7,
      "title": "feat: list assigned PR links via gh",
      "diff": "diff --git a/scripts/gh-my-prs/go.mod b/scripts/gh-my-prs/go.mod\nnew file mode 100644\nindex 0000000..c579916\n--- /dev/null\n+++ b/scripts/gh-my-prs/go.mod\n@@ -0,0 +1,4 @@\n+module github.com/Ryota-Onuma/ai-agents/scripts/gh-my-prs\n+\n+go 1.25\n+\ndiff --git a/scripts/gh-my-prs/main.go b/scripts/gh-my-prs/main.go\nnew file mode 100644\nindex 0000000..02d1461\n--- /dev/null\n+++ b/scripts/gh-my-prs/main.go\n@@ -0,0 +1,50 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"strings\"\n+\t\"time\"\n+)\n+\n+func ghCmd() string {\n+\tif c := os.Getenv(\"GH_COMMAND\"); c != \"\" {\n+\t\treturn c\n+\t}\n+\treturn \"gh\"\n+}\n+\n+func getAssignedPRLinks(ctx context.Context) ([]string, error) {\n+\tcmd := exec.CommandContext(ctx, ghCmd(), \"pr\", \"list\", \"--assignee\", \"@me\", \"--json\", \"url\", \"--jq\", \".[].url\")\n+\toutput, err := cmd.Output()\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"gh command failed: %w\", err)\n+\t}\n+\tlines := strings.Split(strings.TrimSpace(string(output)), \"\\n\")\n+\tvar links []string\n+\tfor _, line := range lines {\n+\t\tline = strings.TrimSpace(line)\n+\t\tif line != \"\" {\n+\t\t\tlinks = append(links, line)\n+\t\t}\n+\t}\n+\treturn links, nil\n+}\n+\n+func main() {\n+\tlog.SetFlags(0)\n+\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n+\tdefer cancel()\n+\n+\tlinks, err := getAssignedPRLinks(ctx)\n+\tif err != nil {\n+\t\tlog.Fatalf(`{\"level\":\"error\",\"msg\":\"%v\"}`, err)\n+\t}\n+\tlog.Printf(`{\"level\":\"info\",\"msg\":\"found pull requests\",\"count\":%d}`, len(links))\n+\tfor _, l := range links {\n+\t\tfmt.Println(l)\n+\t}\n+}\ndiff --git a/scripts/gh-my-prs/main_test.go b/scripts/gh-my-prs/main_test.go\nnew file mode 100644\nindex 0000000..42e4620\n--- /dev/null\n+++ b/scripts/gh-my-prs/main_test.go\n@@ -0,0 +1,46 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+)\n+\n+func writeFakeGh(t *testing.T, content string, exitCode int) string {\n+\tt.Helper()\n+\tdir := t.TempDir()\n+\tpath := filepath.Join(dir, \"gh\")\n+\tscript := \"#!/bin/sh\\n\" + content + \"\\nexit \" + fmt.Sprintf(\"%d\", exitCode) + \"\\n\"\n+\tif err := os.WriteFile(path, []byte(script), 0o755); err != nil {\n+\t\tt.Fatalf(\"failed to write fake gh: %v\", err)\n+\t}\n+\treturn path\n+}\n+\n+func TestGetAssignedPRLinks(t *testing.T) {\n+\tfake := writeFakeGh(t, \"echo https://example.com/pr1\\necho\\necho https://example.com/pr2\", 0)\n+\tt.Setenv(\"GH_COMMAND\", fake)\n+\tlinks, err := getAssignedPRLinks(context.Background())\n+\tif err != nil {\n+\t\tt.Fatalf(\"expected no error, got %v\", err)\n+\t}\n+\twant := []string{\"https://example.com/pr1\", \"https://example.com/pr2\"}\n+\tif len(links) != len(want) {\n+\t\tt.Fatalf(\"unexpected link count: %d\", len(links))\n+\t}\n+\tfor i, l := range links {\n+\t\tif l != want[i] {\n+\t\t\tt.Errorf(\"link %d = %s; want %s\", i, l, want[i])\n+\t\t}\n+\t}\n+}\n+\n+func TestGetAssignedPRLinksError(t *testing.T) {\n+\tfake := writeFakeGh(t, \"echo error 1\u003e\u00262\", 1)\n+\tt.Setenv(\"GH_COMMAND\", fake)\n+\tif _, err := getAssignedPRLinks(context.Background()); err == nil {\n+\t\tt.Fatalf(\"expected error\")\n+\t}\n+}\n"
    }
  ],
  "conversations": [
    {
      "pr_number": 7,
      "comments": [],
      "review_comments": [
        {
          "id": 2295466397,
          "author": "Ryota-Onuma",
          "body": "テスト なんでexample.comを使うんですか？",
          "path": "scripts/gh-my-prs/main_test.go",
          "line": 23,
          "created_at": "2025-08-23T08:14:20Z",
          "updated_at": "2025-08-23T08:49:00Z",
          "diff_hunk": "@@ -0,0 +1,46 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+)\n+\n+func writeFakeGh(t *testing.T, content string, exitCode int) string {\n+\tt.Helper()\n+\tdir := t.TempDir()\n+\tpath := filepath.Join(dir, \"gh\")\n+\tscript := \"#!/bin/sh\\n\" + content + \"\\nexit \" + fmt.Sprintf(\"%d\", exitCode) + \"\\n\"\n+\tif err := os.WriteFile(path, []byte(script), 0o755); err != nil {\n+\t\tt.Fatalf(\"failed to write fake gh: %v\", err)\n+\t}\n+\treturn path\n+}\n+\n+func TestGetAssignedPRLinks(t *testing.T) {\n+\tfake := writeFakeGh(t, \"echo https://example.com/pr1\\necho\\necho https://example.com/pr2\", 0)",
          "url": "https://github.com/Ryota-Onuma/ai-agents/pull/7#discussion_r2295466397"
        }
      ]
    },
    {
      "pr_number": 7,
      "comments": [],
      "review_comments": [
        {
          "id": 2295466397,
          "author": "Ryota-Onuma",
          "body": "テスト なんでexample.comを使うんですか？",
          "path": "scripts/gh-my-prs/main_test.go",
          "line": 23,
          "created_at": "2025-08-23T08:14:20Z",
          "updated_at": "2025-08-23T08:49:00Z",
          "diff_hunk": "@@ -0,0 +1,46 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+)\n+\n+func writeFakeGh(t *testing.T, content string, exitCode int) string {\n+\tt.Helper()\n+\tdir := t.TempDir()\n+\tpath := filepath.Join(dir, \"gh\")\n+\tscript := \"#!/bin/sh\\n\" + content + \"\\nexit \" + fmt.Sprintf(\"%d\", exitCode) + \"\\n\"\n+\tif err := os.WriteFile(path, []byte(script), 0o755); err != nil {\n+\t\tt.Fatalf(\"failed to write fake gh: %v\", err)\n+\t}\n+\treturn path\n+}\n+\n+func TestGetAssignedPRLinks(t *testing.T) {\n+\tfake := writeFakeGh(t, \"echo https://example.com/pr1\\necho\\necho https://example.com/pr2\", 0)",
          "url": "https://github.com/Ryota-Onuma/ai-agents/pull/7#discussion_r2295466397"
        }
      ]
    }
  ]
}